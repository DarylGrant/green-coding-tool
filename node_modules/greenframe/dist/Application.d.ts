import { ComponentBase } from "./ComponentBase";
import Activity from "./Activity";
import ModalComponent from "./ModalComponent";
import Component from "./Component";
export declare type ColorSchemaName = "dark" | "light" | "highContrast";
export declare type ColorSchema = {
    [customProperty: string]: string;
};
declare class ApplicationRoot extends ComponentBase {
    constructor();
    setup(): void;
}
export default class Application {
    readonly applicationName: any;
    private defaultState;
    private appSetup?;
    $root: ApplicationRoot;
    static ThrowFatalOnNullModalObject: boolean;
    $title: HTMLTitleElement;
    private constructTime;
    private currentColorScheme;
    private registeredColorSchemaStylesheets;
    private registeredColorSchemas;
    getSchemaProperty(prop: string): string;
    static GetColorScheme(): ColorSchemaName;
    registerColorScheme(name: ColorSchemaName, schema: ColorSchema): void;
    setColorSchema(newSchema: ColorSchemaName, remember?: boolean): void;
    private _state;
    get state(): string;
    set state(newState: string);
    refresh(): void;
    constructor(applicationName: any, defaultState?: string, appSetup?: ((state: string) => void) | undefined);
    isAppInstalled(): boolean;
    private currentRoute;
    isActivityActive(test: Activity): boolean;
    private navigated;
    private currentlyConstructedActivity?;
    private routeChanged;
    startActivityWithoutRouting(activityClass: CustomElementConstructor, args?: {
        [key: string]: string;
    }): void;
    private static ErrorActivityTagName;
    registerErrorActivity(activityClass: CustomElementConstructor): void;
    private notFoundActivity?;
    registerNotFoundActivity(activity: CustomElementConstructor): void;
    declareStyleProp(propertyName: string, value: string): void;
    private fixedComponents;
    private fixedComponentsHidden;
    hideFixedComponents(): void;
    private calculateActivitySize;
    registerFixedComponent(anchor: "top" | "left" | "bottom" | "right", element: Component): void;
    unregisterFixedComponents(): void;
    unregisterFixedComponent(element: string | HTMLElement, failSilently?: boolean): void;
    showFixedComponents(): void;
    private registerComponent;
    getPageArguments(): {
        [key: string]: string;
    };
    getCurrentActivity(): Activity;
    private getHashArguments;
    private lastHash;
    get hash(): string;
    hashChange(force?: true): void;
    attachModal(modal: ModalComponent): void;
    private currentActivityStartedVia;
    private currentActivityTag?;
    private currentActivityArguments?;
    private startActivityViaTag;
    back(): void;
    private getLoadedActivities;
    goto(route: string, data?: {
        [key: string]: string;
    }): void;
    private isPageArgumentsOutdated;
    refreshCurrentActivity(): void;
    private preloadResources;
    private started;
    private routes;
    private static SELF_POPULATE_ROUTING_HISTORY;
    private generateRouteHistoryFromCurrentRoute;
    start(args: {
        routes: {
            [route: string]: () => CustomElementConstructor;
        };
        componentDefinitions: CustomElementConstructor[];
    }): Promise<void>;
}
export {};
