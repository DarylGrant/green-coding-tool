import Layout from "./Layout";
export declare type ComponentLoadBehavior = "hideBeforeReady" | "useLoadAttribute" | false;
export declare abstract class ComponentBase extends HTMLElement {
    private isolate;
    private static commonCSSBlobs;
    private static commonCSSSource;
    private static CachedLayouts;
    h(str: string): HTMLHeadingElement;
    p(str: string): HTMLParagraphElement;
    layout: ((root: Layout) => void) | undefined;
    abstract setup(): void | Promise<void>;
    static addCommonCSS(css: string): void;
    protected loadBehavior: ComponentLoadBehavior;
    $root: ComponentBase | ShadowRoot | HTMLElement | DocumentFragment;
    constructor(isolate?: boolean);
    private static DOMParser;
    hide(): void;
    show(): void;
    private static HTMLInsertCount;
    html(html: string): void;
    css(css: string): Promise<void>;
    connect($element: HTMLElement | HTMLElement[], parent?: string | HTMLElement | ShadowRoot | DocumentFragment): void;
    $(query: string, $root?: HTMLElement | ShadowRoot | DocumentFragment): HTMLElement;
    $c(query: string, $root?: HTMLElement | ShadowRoot | DocumentFragment): ComponentBase;
    $$(query: string, loop?: ($e: HTMLElement, index: number) => void, $root?: HTMLElement | ShadowRoot | DocumentFragment): HTMLElement[];
    $has(query: string, $root?: HTMLElement | ShadowRoot): boolean;
    $_(query: string, $root?: HTMLElement | ShadowRoot): HTMLElement | null;
    $deep(query: string): HTMLElement | null;
    connectTo($to: HTMLElement | ComponentBase): void;
    protected connectedCallbackRan: boolean;
    protected connectedCallbackFinished: boolean;
    getCssVar(variableName: string): string;
    setCssVar(variableName: string, newValue: string): void;
    protected getClassName(): string;
    private uniqueClass;
    private componentCSStoIsolatedCSS;
    static RemapRootToDocumentFragmentDuringConnectedCallback: boolean;
    connectedCallback(): Promise<void>;
    private _uid?;
    get uid(): string;
}
